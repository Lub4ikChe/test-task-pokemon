{"version":3,"sources":["redux/reducers/filterReducer.ts","components/FilterList.tsx","redux/actions/filter.ts","redux/types.ts","components/Loader.tsx","components/Button.tsx","components/PokemonItem.tsx","components/SelectedPokemon.tsx","redux/reducers/pokemonsReducer.ts","redux/reducers/appReducer.ts","redux/actions/app.ts","redux/actions/pokemons.ts","components/MainContent.tsx","components/Header.tsx","App.tsx","serviceWorker.ts","redux/reducers/index.ts","redux/store.ts","index.tsx"],"names":["getFilterState","rootState","filter","initialState","filterType","filters","FilterList","useSelector","dispatch","useDispatch","React","useState","active","setActive","setFilterTypeHendler","useCallback","type","payload","setFilterType","useEffect","parseredData","axios","get","then","data","results","map","item","name","catch","err","console","log","className","length","onClick","index","key","Loader","speed","width","height","viewBox","backgroundColor","foregroundColor","cx","cy","r","x","y","rx","ry","Button","memo","onClickHendler","disabled","capitalize","s","charAt","toUpperCase","slice","colors","PokemonItem","imgUrl","types","src","alt","SelectedPokemon","totalMoves","hp","weight","spAttack","spDefense","defense","attack","getPokemonsState","pokemons","selectedPokemon","getAppState","app","showLoader","show","fetchPokemons","offset","link","pokemonPromises","url","all","resp","i","pokemonObj","sprites","front_default","stats","find","stat","base_stat","moves","push","MainContent","selectPokemon","items","itemToRender","includes","Array","fill","_","Header","App","Boolean","window","location","hostname","match","rootReducer","combineReducers","state","action","composeEnhancers","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.96dc6543.chunk.js","sourcesContent":["import { SET_FILTERS } from './../types';\r\nimport { SET_FILTER } from '../types';\r\nimport { RootState } from './index';\r\nimport { IPokemonItem } from './pokemonsReducer';\r\n\r\ninterface IFilterState {\r\n    filterType: string | null,\r\n    filters: Array<string>\r\n};\r\n\r\ninterface ISetFilteTypeAction {\r\n    type: typeof SET_FILTER,\r\n    payload: string | null\r\n};\r\n\r\ninterface ISetFiltersAction {\r\n    type: typeof SET_FILTERS,\r\n    payload: Array<string>\r\n}\r\n\r\nexport type FilterActionTypes = ISetFilteTypeAction | ISetFiltersAction;\r\n\r\nexport const getFilterState = (rootState: RootState): IFilterState => (rootState.filter);\r\n\r\nconst initialState: IFilterState = {\r\n    filterType: null,\r\n    filters: [],\r\n};\r\n\r\nexport const filterReducer = (state = initialState, action: FilterActionTypes): IFilterState => {\r\n    switch (action.type) {\r\n        case SET_FILTER:\r\n            return {\r\n                ...state,\r\n                filterType: action.payload\r\n            };\r\n\r\n        case SET_FILTERS:\r\n            return {\r\n                ...state,\r\n                filters: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n\r\nexport const filterByType = (items: Array<IPokemonItem>, type: string | null): Array<IPokemonItem> => {\r\n    if (type === null) {\r\n        return items;\r\n    } else {\r\n        return items.filter((item => {\r\n            return item.types.includes(type);\r\n        }));\r\n    }\r\n}","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { fetchFilters, setFilterType } from '../redux/actions/filter';\r\nimport { getFilterState } from '../redux/reducers/filterReducer';\r\n\r\nexport const FilterList: React.FC = () => {\r\n\r\n    const { filters } = useSelector(getFilterState)\r\n    const dispatch = useDispatch();\r\n    const [active, setActive] = React.useState<null | string>(null);\r\n\r\n    const setFilterTypeHendler = React.useCallback((type: string | null) => {\r\n        dispatch(setFilterType(type));\r\n        setActive(type);\r\n    }, [])\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchFilters());\r\n    }, []);\r\n\r\n\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"filter-list\">\r\n                {filters.length === 0 ? (\r\n                    <p>Loading filters...</p>\r\n                ) : (\r\n                        <ul>\r\n                            <li\r\n                                className={`${active === null ? 'active' : ''}`}\r\n                                onClick={() => setFilterTypeHendler(null)}\r\n                            >All</li>\r\n                            {\r\n                                filters.length && filters.map((item, index) => {\r\n                                    return (\r\n                                        <li\r\n                                            className={`${active === item ? 'active' : ''}`}\r\n                                            key={`${item}_${index}`}\r\n                                            onClick={() => setFilterTypeHendler(item)}\r\n                                        >{item}</li>\r\n                                    )\r\n                                })\r\n                            }\r\n                        </ul>\r\n                    )}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import { SET_FILTERS } from './../types';\r\nimport { FilterActionTypes } from '../reducers/filterReducer'\r\nimport { SET_FILTER } from '../types'\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from './../reducers/index';\r\nimport axios from 'axios';\r\n\r\nexport const setFilterType = (type: string | null): FilterActionTypes => {\r\n    return {\r\n        type: SET_FILTER,\r\n        payload: type\r\n    }\r\n}\r\n\r\nexport const setFilters = (items: Array<string>): FilterActionTypes => {\r\n    return {\r\n        type: SET_FILTERS,\r\n        payload: items\r\n    }\r\n}\r\n\r\nexport const fetchFilters = ():\r\n    ThunkAction<\r\n        void,\r\n        RootState,\r\n        undefined,\r\n        FilterActionTypes\r\n    > => (dispatch) => {\r\n        type getData = { results: Array<{ name: string, url: string }> };\r\n        const link: string = 'https://pokeapi.co/api/v2/type?limit=999';\r\n        let parseredData: Array<string> = [];\r\n        axios.get<getData>(link)\r\n            .then(({ data }) => {\r\n                parseredData = data.results.map(item => item.name);\r\n                dispatch(setFilters(parseredData));\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n","export const SET_POKEMONS = 'POKEMONS/SET_POKEMONS';\r\nexport const SHOW_LOADER = 'APP/SHOW_LOADER';\r\nexport const SELECT_POKEMON = 'SELECT_POKEMON';\r\nexport const SET_FILTER = 'FILTERS/SET_FILTER';\r\nexport const SET_FILTERS = 'FILTERS/SET_FILTERS';\r\n","import React from 'react';\r\nimport ContentLoader from 'react-content-loader';\r\n\r\nexport const Loader: React.FC = () => (\r\n    <ContentLoader\r\n        speed={2}\r\n        width={185}\r\n        height={290}\r\n        viewBox=\"0 0 185 290\"\r\n        backgroundColor=\"#ebeaea\"\r\n        foregroundColor=\"#ecebeb\"\r\n    >\r\n        <circle cx=\"73\" cy=\"57\" r=\"55\" />\r\n        <rect x=\"23\" y=\"121\" rx=\"0\" ry=\"0\" width=\"102\" height=\"22\" />\r\n        <rect x=\"24\" y=\"154\" rx=\"0\" ry=\"0\" width=\"43\" height=\"18\" />\r\n        <rect x=\"84\" y=\"154\" rx=\"0\" ry=\"0\" width=\"43\" height=\"18\" />\r\n    </ContentLoader>\r\n)\r\n","import React from 'react';\r\n\r\ninterface Button {\r\n    disabled: boolean,\r\n    onClickHendler: () => void\r\n}\r\n\r\nexport const Button: React.FC<Button> = React.memo(({ onClickHendler, disabled }) => {\r\n    return (\r\n        <button\r\n            disabled={disabled}\r\n            onClick={onClickHendler}\r\n            className=\"load-more-btn\">\r\n            Load More\r\n        </button>\r\n    )\r\n})\r\n","import React from 'react';\r\n\r\ninterface PokemonItem {\r\n    imgUrl: string,\r\n    name: string,\r\n    types: Array<string>,\r\n    onClickHendler: () => void\r\n}\r\nexport const capitalize = (s: string) => s.charAt(0).toUpperCase() + s.slice(1);\r\nconst colors = ['yellow', 'orange'];\r\n\r\nexport const PokemonItem: React.FC<PokemonItem> = React.memo(({ name, imgUrl, types, onClickHendler }) => {\r\n\r\n    return (\r\n        <div className=\"pokemon-item\">\r\n            <div\r\n                onClick={onClickHendler}\r\n                className=\"pokemon-item-img\">\r\n                <img src={imgUrl} alt={`${name}_pokemon`} />\r\n            </div>\r\n            <div className=\"pokemon-item-name\">{capitalize(name)}</div>\r\n            <div className=\"pokemon-item-types\">\r\n                {\r\n                    types.map((item, index) => {\r\n                        return (\r\n                            <div\r\n                                key={`${item}_${index}`}\r\n                                className={`pokemon-type ${colors[index]}`}>{item}\r\n                            </div>\r\n                        )\r\n                    })\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n)","import React from 'react';\r\nimport { IPokemonItem } from '../redux/reducers/pokemonsReducer';\r\nimport { capitalize } from './PokemonItem';\r\n\r\n\r\nexport const SelectedPokemon: React.FC<IPokemonItem> = React.memo(({ imgUrl, name, totalMoves, hp, weight, spAttack, spDefense, speed, defense, attack, types }) => {\r\n    return (\r\n        <div className=\"pokemon-selected-item\">\r\n            <div className=\"pokemon-selected-item-img\">\r\n                <img src={imgUrl} alt={`${name}_pokemon`} />\r\n            </div>\r\n            <div className=\"pokemon-selected-item-name\">{capitalize(name)}</div>\r\n            <div className=\"pokemon-selected-item-characteristics\">\r\n                <table>\r\n                    <tbody>\r\n                        <tr>\r\n                            <td>Type</td>\r\n                            <td>{types[0]}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Attack</td>\r\n                            <td>{attack}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Defense</td>\r\n                            <td>{defense}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>HP</td>\r\n                            <td>{hp}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>SP Attack</td>\r\n                            <td>{spAttack}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>SP Defense</td>\r\n                            <td>{spDefense}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Speed</td>\r\n                            <td>{speed}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Weight</td>\r\n                            <td>{weight}</td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>Total moves</td>\r\n                            <td>{totalMoves}</td>\r\n                        </tr>\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n)","import { SELECT_POKEMON, SET_POKEMONS } from './../types';\r\nimport { RootState } from './index';\r\n\r\nexport interface IPokemonItem {\r\n    name: string,\r\n    types: Array<string>,\r\n    imgUrl: string,\r\n    attack: number,\r\n    defense: number,\r\n    hp: number,\r\n    spAttack: number,\r\n    spDefense: number,\r\n    speed: number,\r\n    weight: number,\r\n    totalMoves: number\r\n};\r\n\r\ninterface IPokenosState {\r\n    pokemons: Array<IPokemonItem>,\r\n    selectedPokemon: null | IPokemonItem\r\n};\r\n\r\ninterface ISetPokemonsAction {\r\n    type: typeof SET_POKEMONS,\r\n    payload: Array<IPokemonItem>\r\n};\r\n\r\ninterface ISetSelectedPokemonAction {\r\n    type: typeof SELECT_POKEMON,\r\n    payload: IPokemonItem\r\n};\r\n\r\nexport type PokemonsActionTypes = ISetPokemonsAction | ISetSelectedPokemonAction;\r\n\r\nexport const getPokemonsState = (rootState: RootState): IPokenosState => (rootState.pokemons);\r\n\r\nconst initialState: IPokenosState = {\r\n    pokemons: [],\r\n    selectedPokemon: null\r\n\r\n};\r\n\r\nexport const pokemonsReducer = (state = initialState, action: PokemonsActionTypes): IPokenosState => {\r\n    switch (action.type) {\r\n        case SET_POKEMONS:\r\n            return {\r\n                ...state,\r\n                pokemons: [...state.pokemons, ...action.payload]\r\n            };\r\n\r\n        case SELECT_POKEMON:\r\n            return {\r\n                ...state,\r\n                selectedPokemon: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}\r\n","import { SHOW_LOADER } from './../types';\r\nimport { RootState } from './index';\r\n\r\ninterface IAppState {\r\n    showLoader: boolean\r\n};\r\n\r\ninterface IAppAction {\r\n    type: typeof SHOW_LOADER,\r\n    payload: boolean\r\n};\r\n\r\nexport type AppActionTypes = IAppAction;\r\n\r\nexport const getAppState = (rootState: RootState): IAppState => (rootState.app);\r\n\r\nconst initialState: IAppState = {\r\n    showLoader: false\r\n};\r\n\r\nexport const appReducer = (state = initialState, action: AppActionTypes): IAppState => {\r\n    switch (action.type) {\r\n        case SHOW_LOADER:\r\n            return {\r\n                ...state,\r\n                showLoader: action.payload\r\n            }\r\n\r\n        default:\r\n            return state\r\n    }\r\n}","import { SHOW_LOADER } from './../types';\r\nimport { AppActionTypes } from './../reducers/appReducer';\r\n\r\nexport const showLoader = (show: boolean): AppActionTypes => {\r\n    return {\r\n        type: SHOW_LOADER,\r\n        payload: show\r\n    }\r\n}","import { showLoader } from './app';\r\nimport { AppActionTypes } from './../reducers/appReducer';\r\nimport { SELECT_POKEMON, SET_POKEMONS } from './../types';\r\nimport { PokemonsActionTypes } from './../reducers/pokemonsReducer';\r\nimport { IPokemonItem } from '../reducers/pokemonsReducer';\r\nimport { ThunkAction } from 'redux-thunk';\r\nimport { RootState } from './../reducers/index';\r\nimport axios from 'axios';\r\n\r\nexport const setPokemons = (pokemons: Array<IPokemonItem>): PokemonsActionTypes => {\r\n    return {\r\n        type: SET_POKEMONS,\r\n        payload: pokemons\r\n    }\r\n}\r\n\r\nexport const setSelectedPokemon = (pokemon: IPokemonItem): PokemonsActionTypes => {\r\n    return {\r\n        type: SELECT_POKEMON,\r\n        payload: pokemon\r\n    }\r\n}\r\n\r\nexport const fetchPokemons = (offset: number):\r\n    ThunkAction<\r\n        void,\r\n        RootState,\r\n        undefined,\r\n        PokemonsActionTypes | AppActionTypes\r\n    > => (dispatch) => {\r\n        type getData = { results: Array<{ name: string, url: string }> };\r\n        type getAllData = {\r\n            types: Array<{ type: { name: string } }>,\r\n            stats: Array<{ stat: { name: string }, base_stat: number }>,\r\n            weight: number,\r\n            moves: [],\r\n            sprites: { front_default: string }\r\n        };\r\n        const link: string = `https://pokeapi.co/api/v2/pokemon?offset=${offset}&limit=12`;\r\n        const parseredData: Array<IPokemonItem> = [];\r\n        dispatch(showLoader(true));\r\n        axios.get<getData>(link)\r\n            .then(({ data }) => {\r\n                const pokemonPromises = data.results.map(item => axios.get<getAllData>(item.url));\r\n                axios.all(pokemonPromises)\r\n                    .then((resp) => {\r\n                        for (let i = 0; i < data.results.length; i++) {\r\n                            const pokemonObj: IPokemonItem = {\r\n                                name: data.results[i].name,\r\n                                types: resp[i].data.types.map(item => item.type.name),\r\n                                imgUrl: resp[i].data.sprites.front_default,\r\n                                attack: resp[i].data.stats.find(item => item.stat.name === 'attack')!.base_stat,\r\n                                defense: resp[i].data.stats.find(item => item.stat.name === 'defense')!.base_stat,\r\n                                hp: resp[i].data.stats.find(item => item.stat.name === 'hp')!.base_stat,\r\n                                spAttack: resp[i].data.stats.find(item => item.stat.name === 'special-attack')!.base_stat,\r\n                                spDefense: resp[i].data.stats.find(item => item.stat.name === 'special-defense')!.base_stat,\r\n                                speed: resp[i].data.stats.find(item => item.stat.name === 'speed')!.base_stat,\r\n                                weight: resp[i].data.weight,\r\n                                totalMoves: resp[i].data.moves.length,\r\n                            };\r\n                            parseredData.push(pokemonObj);\r\n                        }\r\n                        dispatch(setPokemons(parseredData));\r\n                        dispatch(showLoader(false));\r\n                    }).catch(err => console.log(err));\r\n            }).catch(err => console.log(err));\r\n    }\r\n\r\n","import React from 'react';\r\nimport { Button, PokemonItem, SelectedPokemon, Loader } from './';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { getPokemonsState, IPokemonItem } from '../redux/reducers/pokemonsReducer';\r\nimport { getAppState } from '../redux/reducers/appReducer';\r\nimport { fetchPokemons, setSelectedPokemon } from '../redux/actions/pokemons';\r\nimport { filterByType, getFilterState } from '../redux/reducers/filterReducer';\r\n\r\nexport const MainContent: React.FC = () => {\r\n\r\n    const { pokemons, selectedPokemon } = useSelector(getPokemonsState);\r\n    const { showLoader } = useSelector(getAppState);\r\n    const { filterType } = useSelector(getFilterState);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const loadMorePokemons = () => {\r\n        dispatch(fetchPokemons(pokemons.length));\r\n    }\r\n\r\n    const selectPokemon = React.useCallback((item: IPokemonItem) => {\r\n        dispatch(setSelectedPokemon(item));\r\n    }, []);\r\n\r\n    React.useEffect(() => {\r\n        dispatch(fetchPokemons(pokemons.length));\r\n    }, []);\r\n\r\n    const itemToRender = filterByType(pokemons, filterType);\r\n\r\n    return (\r\n        <section className=\"main-content\">\r\n            <div className=\"container\">\r\n                <div className=\"main-content__inner\">\r\n                    {showLoader ? (\r\n                        <div className=\"pokemons-list\">\r\n                            {Array(12).fill(0).map((_, index) => <Loader key={index} />)}\r\n                        </div>\r\n                    ) : (\r\n                            <div className=\"pokemons-list\">\r\n                                {itemToRender.length === 0 && pokemons.length !== 0 &&\r\n                                    <p className='no-filtered-items'>\r\n                                        There are not any {filterType} pokemons in this chunk, load more please :)\r\n                                    </p>\r\n                                }\r\n                                {itemToRender.map((item, index) => {\r\n                                    return (\r\n                                        <PokemonItem\r\n                                            key={`${item.name}_${index}`}\r\n                                            onClickHendler={() => selectPokemon(item)}\r\n                                            name={item.name}\r\n                                            imgUrl={item.imgUrl}\r\n                                            types={item.types}\r\n                                        />\r\n                                    )\r\n                                }\r\n                                )}\r\n                                {pokemons.length !== 0 && pokemons.length < 1050 && <Button\r\n                                    disabled={showLoader}\r\n                                    onClickHendler={loadMorePokemons}\r\n                                />}\r\n                            </div>\r\n                        )}\r\n                    <div className=\"pokemon-selected-view\">\r\n                        {selectedPokemon !== null && <SelectedPokemon {...selectedPokemon} />}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section >\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport const Header: React.FC = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <div className=\"container\">\r\n                <div className=\"header__inner\">\r\n                    <h1 className=\"header__text\">Pokedex</h1>\r\n                </div>\r\n            </div>\r\n        </header>\r\n    )\r\n}\r\n","import React from 'react';\nimport { Header, MainContent, FilterList } from './components';\n\nconst App: React.FC = () => {\n  return (\n    <>\n      <Header />\n      <FilterList />\n      <MainContent />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { filterReducer } from './filterReducer';\r\nimport { pokemonsReducer } from './pokemonsReducer';\r\nimport { appReducer } from './appReducer';\r\nimport { combineReducers } from \"redux\";\r\n\r\nexport const rootReducer = combineReducers({\r\n    app: appReducer,\r\n    pokemons: pokemonsReducer,\r\n    filter: filterReducer\r\n});\r\n\r\nexport type RootState = ReturnType<typeof rootReducer>","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport { rootReducer } from './reducers';\r\n\r\nconst composeEnhancers = (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\r\n\r\nexport const store = createStore(rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/index.scss';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}